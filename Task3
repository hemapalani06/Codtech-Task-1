from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import pickle

# Load dataset
iris = load_iris()
X = iris.data
y = iris.target

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
clf = RandomForestClassifier()
clf.fit(X_train, y_train)

# Save model
with open("model.pkl", "wb") as f:
    pickle.dump(clf, f)
from flask import Flask, request, render_template
import pickle
import numpy as np

app = Flask(__name__)
model = pickle.load(open("model.pkl", "rb"))

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/predict', methods=['POST'])
def predict():
    features = [float(x) for x in request.form.values()]
    final_input = [np.array(features)]
    prediction = model.predict(final_input)
    return render_template('index.html', result=f'Iris Class: {prediction[0]}')

if __name__ == '__main__':
    app.run(debug=True)
<!DOCTYPE html>
<html>
<head>
    <title>Iris Predictor</title>
</head>
<body>
    <h2>Enter flower details:</h2>
    <form action="/predict" method="post">
        Sepal Length: <input type="text" name="sepal_length"><br>
        Sepal Width: <input type="text" name="sepal_width"><br>
        Petal Length: <input type="text" name="petal_length"><br>
        Petal Width: <input type="text" name="petal_width"><br>
        <input type="submit" value="Predict">
    </form>

    {% if result %}
    <h3>Prediction: {{ result }}</h3>
    {% endif %}
</body>
</html>
